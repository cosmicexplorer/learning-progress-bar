// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

#![allow(unused_imports)]
#![allow(unused_extern_crates)]
#![cfg_attr(feature = "cargo-clippy", allow(too_many_arguments, type_complexity))]
#![cfg_attr(rustfmt, rustfmt_skip)]

extern crate thrift;

use thrift::OrderedFloat;
use std::cell::RefCell;
use std::collections::{BTreeMap, BTreeSet};
use std::convert::{From, TryFrom};
use std::default::Default;
use std::error::Error;
use std::fmt;
use std::fmt::{Display, Formatter};
use std::rc::Rc;

use thrift::{ApplicationError, ApplicationErrorKind, ProtocolError, ProtocolErrorKind, TThriftClient};
use thrift::protocol::{TFieldIdentifier, TListIdentifier, TMapIdentifier, TMessageIdentifier, TMessageType, TInputProtocol, TOutputProtocol, TSetIdentifier, TStructIdentifier, TType};
use thrift::protocol::field_id;
use thrift::protocol::verify_expected_message_type;
use thrift::protocol::verify_expected_sequence_number;
use thrift::protocol::verify_expected_service_call;
use thrift::protocol::verify_required_field_exists;
use thrift::server::TProcessor;

#[derive(Copy, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub enum OutputType {
  Stdout = 0,
  Stderr = 1,
}

impl OutputType {
  pub fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    o_prot.write_i32(*self as i32)
  }
  pub fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<OutputType> {
    let enum_value = i_prot.read_i32()?;
    OutputType::try_from(enum_value)  }
}

impl TryFrom<i32> for OutputType {
  type Error = thrift::Error;  fn try_from(i: i32) -> Result<Self, Self::Error> {
    match i {
      0 => Ok(OutputType::Stdout),
      1 => Ok(OutputType::Stderr),
      _ => {
        Err(
          thrift::Error::Protocol(
            ProtocolError::new(
              ProtocolErrorKind::InvalidData,
              format!("cannot convert enum constant {} to OutputType", i)
            )
          )
        )
      },
    }
  }
}

#[derive(Copy, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub enum EventType {
  Start = 0,
  Fin = 1,
  Output = 2,
}

impl EventType {
  pub fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    o_prot.write_i32(*self as i32)
  }
  pub fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<EventType> {
    let enum_value = i_prot.read_i32()?;
    EventType::try_from(enum_value)  }
}

impl TryFrom<i32> for EventType {
  type Error = thrift::Error;  fn try_from(i: i32) -> Result<Self, Self::Error> {
    match i {
      0 => Ok(EventType::Start),
      1 => Ok(EventType::Fin),
      2 => Ok(EventType::Output),
      _ => {
        Err(
          thrift::Error::Protocol(
            ProtocolError::new(
              ProtocolErrorKind::InvalidData,
              format!("cannot convert enum constant {} to EventType", i)
            )
          )
        )
      },
    }
  }
}

//
// OutputChunk
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct OutputChunk {
  pub chunk: Option<String>,
}

impl OutputChunk {
  pub fn new<F1>(chunk: F1) -> OutputChunk where F1: Into<Option<String>> {
    OutputChunk {
      chunk: chunk.into(),
    }
  }
  pub fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<OutputChunk> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<String> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_string()?;
          f_1 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = OutputChunk {
      chunk: f_1,
    };
    Ok(ret)
  }
  pub fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("OutputChunk");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.chunk {
      o_prot.write_field_begin(&TFieldIdentifier::new("chunk", TType::String, 1))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?;
      ()
    } else {
      ()
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

impl Default for OutputChunk {
  fn default() -> Self {
    OutputChunk{
      chunk: Some("".to_owned()),
    }
  }
}

//
// OutputEvent
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct OutputEvent {
  pub type_: Option<OutputType>,
  pub chunk: Option<OutputChunk>,
}

impl OutputEvent {
  pub fn new<F1, F2>(type_: F1, chunk: F2) -> OutputEvent where F1: Into<Option<OutputType>>, F2: Into<Option<OutputChunk>> {
    OutputEvent {
      type_: type_.into(),
      chunk: chunk.into(),
    }
  }
  pub fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<OutputEvent> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<OutputType> = None;
    let mut f_2: Option<OutputChunk> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = OutputType::read_from_in_protocol(i_prot)?;
          f_1 = Some(val);
        },
        2 => {
          let val = OutputChunk::read_from_in_protocol(i_prot)?;
          f_2 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = OutputEvent {
      type_: f_1,
      chunk: f_2,
    };
    Ok(ret)
  }
  pub fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("OutputEvent");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.type_ {
      o_prot.write_field_begin(&TFieldIdentifier::new("type", TType::I32, 1))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?;
      ()
    } else {
      ()
    }
    if let Some(ref fld_var) = self.chunk {
      o_prot.write_field_begin(&TFieldIdentifier::new("chunk", TType::Struct, 2))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?;
      ()
    } else {
      ()
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

impl Default for OutputEvent {
  fn default() -> Self {
    OutputEvent{
      type_: None,
      chunk: None,
    }
  }
}

//
// TimingWithinRun
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct TimingWithinRun {
  pub milliseconds_since_start_of_run: Option<i64>,
}

impl TimingWithinRun {
  pub fn new<F1>(milliseconds_since_start_of_run: F1) -> TimingWithinRun where F1: Into<Option<i64>> {
    TimingWithinRun {
      milliseconds_since_start_of_run: milliseconds_since_start_of_run.into(),
    }
  }
  pub fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<TimingWithinRun> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<i64> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_i64()?;
          f_1 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = TimingWithinRun {
      milliseconds_since_start_of_run: f_1,
    };
    Ok(ret)
  }
  pub fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("TimingWithinRun");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(fld_var) = self.milliseconds_since_start_of_run {
      o_prot.write_field_begin(&TFieldIdentifier::new("milliseconds_since_start_of_run", TType::I64, 1))?;
      o_prot.write_i64(fld_var)?;
      o_prot.write_field_end()?;
      ()
    } else {
      ()
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

impl Default for TimingWithinRun {
  fn default() -> Self {
    TimingWithinRun{
      milliseconds_since_start_of_run: Some(0),
    }
  }
}

//
// RunId
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct RunId {
  pub id: Option<String>,
}

impl RunId {
  pub fn new<F1>(id: F1) -> RunId where F1: Into<Option<String>> {
    RunId {
      id: id.into(),
    }
  }
  pub fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<RunId> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<String> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_string()?;
          f_1 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = RunId {
      id: f_1,
    };
    Ok(ret)
  }
  pub fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("RunId");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.id {
      o_prot.write_field_begin(&TFieldIdentifier::new("id", TType::String, 1))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?;
      ()
    } else {
      ()
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

impl Default for RunId {
  fn default() -> Self {
    RunId{
      id: Some("".to_owned()),
    }
  }
}

//
// ExitStatus
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct ExitStatus {
  pub exit_code: Option<i32>,
}

impl ExitStatus {
  pub fn new<F1>(exit_code: F1) -> ExitStatus where F1: Into<Option<i32>> {
    ExitStatus {
      exit_code: exit_code.into(),
    }
  }
  pub fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<ExitStatus> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<i32> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_i32()?;
          f_1 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = ExitStatus {
      exit_code: f_1,
    };
    Ok(ret)
  }
  pub fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("ExitStatus");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(fld_var) = self.exit_code {
      o_prot.write_field_begin(&TFieldIdentifier::new("exit_code", TType::I32, 1))?;
      o_prot.write_i32(fld_var)?;
      o_prot.write_field_end()?;
      ()
    } else {
      ()
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

impl Default for ExitStatus {
  fn default() -> Self {
    ExitStatus{
      exit_code: Some(0),
    }
  }
}

//
// SubprocessEvent
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct SubprocessEvent {
  pub type_: Option<EventType>,
  pub timing: Option<TimingWithinRun>,
  pub run_id: Option<RunId>,
  pub exit_status: Option<ExitStatus>,
}

impl SubprocessEvent {
  pub fn new<F1, F2, F3, F4>(type_: F1, timing: F2, run_id: F3, exit_status: F4) -> SubprocessEvent where F1: Into<Option<EventType>>, F2: Into<Option<TimingWithinRun>>, F3: Into<Option<RunId>>, F4: Into<Option<ExitStatus>> {
    SubprocessEvent {
      type_: type_.into(),
      timing: timing.into(),
      run_id: run_id.into(),
      exit_status: exit_status.into(),
    }
  }
  pub fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SubprocessEvent> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<EventType> = None;
    let mut f_2: Option<TimingWithinRun> = None;
    let mut f_3: Option<RunId> = None;
    let mut f_4: Option<ExitStatus> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = EventType::read_from_in_protocol(i_prot)?;
          f_1 = Some(val);
        },
        2 => {
          let val = TimingWithinRun::read_from_in_protocol(i_prot)?;
          f_2 = Some(val);
        },
        3 => {
          let val = RunId::read_from_in_protocol(i_prot)?;
          f_3 = Some(val);
        },
        4 => {
          let val = ExitStatus::read_from_in_protocol(i_prot)?;
          f_4 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = SubprocessEvent {
      type_: f_1,
      timing: f_2,
      run_id: f_3,
      exit_status: f_4,
    };
    Ok(ret)
  }
  pub fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("SubprocessEvent");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.type_ {
      o_prot.write_field_begin(&TFieldIdentifier::new("type", TType::I32, 1))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?;
      ()
    } else {
      ()
    }
    if let Some(ref fld_var) = self.timing {
      o_prot.write_field_begin(&TFieldIdentifier::new("timing", TType::Struct, 2))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?;
      ()
    } else {
      ()
    }
    if let Some(ref fld_var) = self.run_id {
      o_prot.write_field_begin(&TFieldIdentifier::new("run_id", TType::Struct, 3))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?;
      ()
    } else {
      ()
    }
    if let Some(ref fld_var) = self.exit_status {
      o_prot.write_field_begin(&TFieldIdentifier::new("exit_status", TType::Struct, 4))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?;
      ()
    } else {
      ()
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

impl Default for SubprocessEvent {
  fn default() -> Self {
    SubprocessEvent{
      type_: None,
      timing: None,
      run_id: None,
      exit_status: None,
    }
  }
}

//
// ProcessExecutionRequest
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct ProcessExecutionRequest {
  pub argv: Option<Vec<String>>,
  pub env: Option<BTreeMap<String, String>>,
  pub unix_epoch_seconds: Option<i64>,
  pub cwd: Option<String>,
}

impl ProcessExecutionRequest {
  pub fn new<F1, F2, F3, F4>(argv: F1, env: F2, unix_epoch_seconds: F3, cwd: F4) -> ProcessExecutionRequest where F1: Into<Option<Vec<String>>>, F2: Into<Option<BTreeMap<String, String>>>, F3: Into<Option<i64>>, F4: Into<Option<String>> {
    ProcessExecutionRequest {
      argv: argv.into(),
      env: env.into(),
      unix_epoch_seconds: unix_epoch_seconds.into(),
      cwd: cwd.into(),
    }
  }
  pub fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<ProcessExecutionRequest> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<Vec<String>> = None;
    let mut f_2: Option<BTreeMap<String, String>> = None;
    let mut f_3: Option<i64> = None;
    let mut f_4: Option<String> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let list_ident = i_prot.read_list_begin()?;
          let mut val: Vec<String> = Vec::with_capacity(list_ident.size as usize);
          for _ in 0..list_ident.size {
            let list_elem_0 = i_prot.read_string()?;
            val.push(list_elem_0);
          }
          i_prot.read_list_end()?;
          f_1 = Some(val);
        },
        2 => {
          let map_ident = i_prot.read_map_begin()?;
          let mut val: BTreeMap<String, String> = BTreeMap::new();
          for _ in 0..map_ident.size {
            let map_key_1 = i_prot.read_string()?;
            let map_val_2 = i_prot.read_string()?;
            val.insert(map_key_1, map_val_2);
          }
          i_prot.read_map_end()?;
          f_2 = Some(val);
        },
        3 => {
          let val = i_prot.read_i64()?;
          f_3 = Some(val);
        },
        4 => {
          let val = i_prot.read_string()?;
          f_4 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = ProcessExecutionRequest {
      argv: f_1,
      env: f_2,
      unix_epoch_seconds: f_3,
      cwd: f_4,
    };
    Ok(ret)
  }
  pub fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("ProcessExecutionRequest");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.argv {
      o_prot.write_field_begin(&TFieldIdentifier::new("argv", TType::List, 1))?;
      o_prot.write_list_begin(&TListIdentifier::new(TType::String, fld_var.len() as i32))?;
      for e in fld_var {
        o_prot.write_string(e)?;
        o_prot.write_list_end()?;
      }
      o_prot.write_field_end()?;
      ()
    } else {
      ()
    }
    if let Some(ref fld_var) = self.env {
      o_prot.write_field_begin(&TFieldIdentifier::new("env", TType::Map, 2))?;
      o_prot.write_map_begin(&TMapIdentifier::new(TType::String, TType::String, fld_var.len() as i32))?;
      for (k, v) in fld_var {
        o_prot.write_string(k)?;
        o_prot.write_string(v)?;
        o_prot.write_map_end()?;
      }
      o_prot.write_field_end()?;
      ()
    } else {
      ()
    }
    if let Some(fld_var) = self.unix_epoch_seconds {
      o_prot.write_field_begin(&TFieldIdentifier::new("unix_epoch_seconds", TType::I64, 3))?;
      o_prot.write_i64(fld_var)?;
      o_prot.write_field_end()?;
      ()
    } else {
      ()
    }
    if let Some(ref fld_var) = self.cwd {
      o_prot.write_field_begin(&TFieldIdentifier::new("cwd", TType::String, 4))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?;
      ()
    } else {
      ()
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

impl Default for ProcessExecutionRequest {
  fn default() -> Self {
    ProcessExecutionRequest{
      argv: Some(Vec::new()),
      env: Some(BTreeMap::new()),
      unix_epoch_seconds: Some(0),
      cwd: Some("".to_owned()),
    }
  }
}

//
// CreationError
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct CreationError {
  pub description: Option<String>,
}

impl CreationError {
  pub fn new<F1>(description: F1) -> CreationError where F1: Into<Option<String>> {
    CreationError {
      description: description.into(),
    }
  }
  pub fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<CreationError> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<String> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_string()?;
          f_1 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = CreationError {
      description: f_1,
    };
    Ok(ret)
  }
  pub fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("CreationError");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.description {
      o_prot.write_field_begin(&TFieldIdentifier::new("description", TType::String, 1))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?;
      ()
    } else {
      ()
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

impl Default for CreationError {
  fn default() -> Self {
    CreationError{
      description: Some("".to_owned()),
    }
  }
}

impl Error for CreationError {
  fn description(&self) -> &str {
    "remote service threw CreationError"
  }
}

impl From<CreationError> for thrift::Error {
  fn from(e: CreationError) -> Self {
    thrift::Error::User(Box::new(e))
  }
}

impl Display for CreationError {
  fn fmt(&self, f: &mut Formatter) -> fmt::Result {
    self.description().fmt(f)
  }
}

//
// ExecutionError
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct ExecutionError {
  pub description: Option<String>,
}

impl ExecutionError {
  pub fn new<F1>(description: F1) -> ExecutionError where F1: Into<Option<String>> {
    ExecutionError {
      description: description.into(),
    }
  }
  pub fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<ExecutionError> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<String> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_string()?;
          f_1 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = ExecutionError {
      description: f_1,
    };
    Ok(ret)
  }
  pub fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("ExecutionError");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.description {
      o_prot.write_field_begin(&TFieldIdentifier::new("description", TType::String, 1))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?;
      ()
    } else {
      ()
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

impl Default for ExecutionError {
  fn default() -> Self {
    ExecutionError{
      description: Some("".to_owned()),
    }
  }
}

impl Error for ExecutionError {
  fn description(&self) -> &str {
    "remote service threw ExecutionError"
  }
}

impl From<ExecutionError> for thrift::Error {
  fn from(e: ExecutionError) -> Self {
    thrift::Error::User(Box::new(e))
  }
}

impl Display for ExecutionError {
  fn fmt(&self, f: &mut Formatter) -> fmt::Result {
    self.description().fmt(f)
  }
}

//
// ProgramHasEnded
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct ProgramHasEnded {
  pub exit_code: Option<i32>,
  pub when_it_was_completed: Option<TimingWithinRun>,
}

impl ProgramHasEnded {
  pub fn new<F1, F2>(exit_code: F1, when_it_was_completed: F2) -> ProgramHasEnded where F1: Into<Option<i32>>, F2: Into<Option<TimingWithinRun>> {
    ProgramHasEnded {
      exit_code: exit_code.into(),
      when_it_was_completed: when_it_was_completed.into(),
    }
  }
  pub fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<ProgramHasEnded> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<i32> = None;
    let mut f_2: Option<TimingWithinRun> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_i32()?;
          f_1 = Some(val);
        },
        2 => {
          let val = TimingWithinRun::read_from_in_protocol(i_prot)?;
          f_2 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = ProgramHasEnded {
      exit_code: f_1,
      when_it_was_completed: f_2,
    };
    Ok(ret)
  }
  pub fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("ProgramHasEnded");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(fld_var) = self.exit_code {
      o_prot.write_field_begin(&TFieldIdentifier::new("exit_code", TType::I32, 1))?;
      o_prot.write_i32(fld_var)?;
      o_prot.write_field_end()?;
      ()
    } else {
      ()
    }
    if let Some(ref fld_var) = self.when_it_was_completed {
      o_prot.write_field_begin(&TFieldIdentifier::new("when_it_was_completed", TType::Struct, 2))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?;
      ()
    } else {
      ()
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

impl Default for ProgramHasEnded {
  fn default() -> Self {
    ProgramHasEnded{
      exit_code: Some(0),
      when_it_was_completed: None,
    }
  }
}

impl Error for ProgramHasEnded {
  fn description(&self) -> &str {
    "remote service threw ProgramHasEnded"
  }
}

impl From<ProgramHasEnded> for thrift::Error {
  fn from(e: ProgramHasEnded) -> Self {
    thrift::Error::User(Box::new(e))
  }
}

impl Display for ProgramHasEnded {
  fn fmt(&self, f: &mut Formatter) -> fmt::Result {
    self.description().fmt(f)
  }
}

//
// TerminalWrapper service client
//

pub trait TTerminalWrapperSyncClient {
  fn begin_execution(&mut self, exe_req: ProcessExecutionRequest) -> thrift::Result<RunId>;
  fn get_next_event(&mut self) -> thrift::Result<SubprocessEvent>;
}

pub trait TTerminalWrapperSyncClientMarker {}

pub struct TerminalWrapperSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {
  _i_prot: IP,
  _o_prot: OP,
  _sequence_number: i32,
}

impl <IP, OP> TerminalWrapperSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {
  pub fn new(input_protocol: IP, output_protocol: OP) -> TerminalWrapperSyncClient<IP, OP> {
    TerminalWrapperSyncClient { _i_prot: input_protocol, _o_prot: output_protocol, _sequence_number: 0 }
  }
}

impl <IP, OP> TThriftClient for TerminalWrapperSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {
  fn i_prot_mut(&mut self) -> &mut dyn TInputProtocol { &mut self._i_prot }
  fn o_prot_mut(&mut self) -> &mut dyn TOutputProtocol { &mut self._o_prot }
  fn sequence_number(&self) -> i32 { self._sequence_number }
  fn increment_sequence_number(&mut self) -> i32 { self._sequence_number += 1; self._sequence_number }
}

impl <IP, OP> TTerminalWrapperSyncClientMarker for TerminalWrapperSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {}

impl <C: TThriftClient + TTerminalWrapperSyncClientMarker> TTerminalWrapperSyncClient for C {
  fn begin_execution(&mut self, exe_req: ProcessExecutionRequest) -> thrift::Result<RunId> {
    (
      {
        self.increment_sequence_number();
        let message_ident = TMessageIdentifier::new("beginExecution", TMessageType::Call, self.sequence_number());
        let call_args = TerminalWrapperBeginExecutionArgs { exe_req: exe_req };
        self.o_prot_mut().write_message_begin(&message_ident)?;
        call_args.write_to_out_protocol(self.o_prot_mut())?;
        self.o_prot_mut().write_message_end()?;
        self.o_prot_mut().flush()
      }
    )?;
    {
      let message_ident = self.i_prot_mut().read_message_begin()?;
      verify_expected_sequence_number(self.sequence_number(), message_ident.sequence_number)?;
      verify_expected_service_call("beginExecution", &message_ident.name)?;
      if message_ident.message_type == TMessageType::Exception {
        let remote_error = thrift::Error::read_application_error_from_in_protocol(self.i_prot_mut())?;
        self.i_prot_mut().read_message_end()?;
        return Err(thrift::Error::Application(remote_error))
      }
      verify_expected_message_type(TMessageType::Reply, message_ident.message_type)?;
      let result = TerminalWrapperBeginExecutionResult::read_from_in_protocol(self.i_prot_mut())?;
      self.i_prot_mut().read_message_end()?;
      result.ok_or()
    }
  }
  fn get_next_event(&mut self) -> thrift::Result<SubprocessEvent> {
    (
      {
        self.increment_sequence_number();
        let message_ident = TMessageIdentifier::new("getNextEvent", TMessageType::Call, self.sequence_number());
        let call_args = TerminalWrapperGetNextEventArgs {  };
        self.o_prot_mut().write_message_begin(&message_ident)?;
        call_args.write_to_out_protocol(self.o_prot_mut())?;
        self.o_prot_mut().write_message_end()?;
        self.o_prot_mut().flush()
      }
    )?;
    {
      let message_ident = self.i_prot_mut().read_message_begin()?;
      verify_expected_sequence_number(self.sequence_number(), message_ident.sequence_number)?;
      verify_expected_service_call("getNextEvent", &message_ident.name)?;
      if message_ident.message_type == TMessageType::Exception {
        let remote_error = thrift::Error::read_application_error_from_in_protocol(self.i_prot_mut())?;
        self.i_prot_mut().read_message_end()?;
        return Err(thrift::Error::Application(remote_error))
      }
      verify_expected_message_type(TMessageType::Reply, message_ident.message_type)?;
      let result = TerminalWrapperGetNextEventResult::read_from_in_protocol(self.i_prot_mut())?;
      self.i_prot_mut().read_message_end()?;
      result.ok_or()
    }
  }
}

//
// TerminalWrapper service processor
//

pub trait TerminalWrapperSyncHandler {
  fn handle_begin_execution(&self, exe_req: ProcessExecutionRequest) -> thrift::Result<RunId>;
  fn handle_get_next_event(&self) -> thrift::Result<SubprocessEvent>;
}

pub struct TerminalWrapperSyncProcessor<H: TerminalWrapperSyncHandler> {
  handler: H,
}

impl <H: TerminalWrapperSyncHandler> TerminalWrapperSyncProcessor<H> {
  pub fn new(handler: H) -> TerminalWrapperSyncProcessor<H> {
    TerminalWrapperSyncProcessor {
      handler,
    }
  }
  fn process_begin_execution(&self, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    TTerminalWrapperProcessFunctions::process_begin_execution(&self.handler, incoming_sequence_number, i_prot, o_prot)
  }
  fn process_get_next_event(&self, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    TTerminalWrapperProcessFunctions::process_get_next_event(&self.handler, incoming_sequence_number, i_prot, o_prot)
  }
}

pub struct TTerminalWrapperProcessFunctions;

impl TTerminalWrapperProcessFunctions {
  pub fn process_begin_execution<H: TerminalWrapperSyncHandler>(handler: &H, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let args = TerminalWrapperBeginExecutionArgs::read_from_in_protocol(i_prot)?;
    match handler.handle_begin_execution(args.exe_req) {
      Ok(handler_return) => {
        let message_ident = TMessageIdentifier::new("beginExecution", TMessageType::Reply, incoming_sequence_number);
        o_prot.write_message_begin(&message_ident)?;
        let ret = TerminalWrapperBeginExecutionResult { result_value: Some(handler_return), creation_error: None };
        ret.write_to_out_protocol(o_prot)?;
        o_prot.write_message_end()?;
        o_prot.flush()
      },
      Err(e) => {
        match e {
          thrift::Error::User(usr_err) => {
            if usr_err.downcast_ref::<CreationError>().is_some() {
              let err = usr_err.downcast::<CreationError>().expect("downcast already checked");
              let ret_err = TerminalWrapperBeginExecutionResult{ result_value: None, creation_error: Some(*err) };
              let message_ident = TMessageIdentifier::new("beginExecution", TMessageType::Reply, incoming_sequence_number);
              o_prot.write_message_begin(&message_ident)?;
              ret_err.write_to_out_protocol(o_prot)?;
              o_prot.write_message_end()?;
              o_prot.flush()
            } else {
              let ret_err = {
                ApplicationError::new(
                  ApplicationErrorKind::Unknown,
                  usr_err.description()
                )
              };
              let message_ident = TMessageIdentifier::new("beginExecution", TMessageType::Exception, incoming_sequence_number);
              o_prot.write_message_begin(&message_ident)?;
              thrift::Error::write_application_error_to_out_protocol(&ret_err, o_prot)?;
              o_prot.write_message_end()?;
              o_prot.flush()
            }
          },
          thrift::Error::Application(app_err) => {
            let message_ident = TMessageIdentifier::new("beginExecution", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&app_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
          _ => {
            let ret_err = {
              ApplicationError::new(
                ApplicationErrorKind::Unknown,
                e.description()
              )
            };
            let message_ident = TMessageIdentifier::new("beginExecution", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&ret_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
        }
      },
    }
  }
  pub fn process_get_next_event<H: TerminalWrapperSyncHandler>(handler: &H, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let _ = TerminalWrapperGetNextEventArgs::read_from_in_protocol(i_prot)?;
    match handler.handle_get_next_event() {
      Ok(handler_return) => {
        let message_ident = TMessageIdentifier::new("getNextEvent", TMessageType::Reply, incoming_sequence_number);
        o_prot.write_message_begin(&message_ident)?;
        let ret = TerminalWrapperGetNextEventResult { result_value: Some(handler_return), program_has_ended: None, exe_error: None };
        ret.write_to_out_protocol(o_prot)?;
        o_prot.write_message_end()?;
        o_prot.flush()
      },
      Err(e) => {
        match e {
          thrift::Error::User(usr_err) => {
            if usr_err.downcast_ref::<ProgramHasEnded>().is_some() {
              let err = usr_err.downcast::<ProgramHasEnded>().expect("downcast already checked");
              let ret_err = TerminalWrapperGetNextEventResult{ result_value: None, program_has_ended: Some(*err), exe_error: None };
              let message_ident = TMessageIdentifier::new("getNextEvent", TMessageType::Reply, incoming_sequence_number);
              o_prot.write_message_begin(&message_ident)?;
              ret_err.write_to_out_protocol(o_prot)?;
              o_prot.write_message_end()?;
              o_prot.flush()
            } else if usr_err.downcast_ref::<ExecutionError>().is_some() {
              let err = usr_err.downcast::<ExecutionError>().expect("downcast already checked");
              let ret_err = TerminalWrapperGetNextEventResult{ result_value: None, program_has_ended: None, exe_error: Some(*err) };
              let message_ident = TMessageIdentifier::new("getNextEvent", TMessageType::Reply, incoming_sequence_number);
              o_prot.write_message_begin(&message_ident)?;
              ret_err.write_to_out_protocol(o_prot)?;
              o_prot.write_message_end()?;
              o_prot.flush()
            } else {
              let ret_err = {
                ApplicationError::new(
                  ApplicationErrorKind::Unknown,
                  usr_err.description()
                )
              };
              let message_ident = TMessageIdentifier::new("getNextEvent", TMessageType::Exception, incoming_sequence_number);
              o_prot.write_message_begin(&message_ident)?;
              thrift::Error::write_application_error_to_out_protocol(&ret_err, o_prot)?;
              o_prot.write_message_end()?;
              o_prot.flush()
            }
          },
          thrift::Error::Application(app_err) => {
            let message_ident = TMessageIdentifier::new("getNextEvent", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&app_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
          _ => {
            let ret_err = {
              ApplicationError::new(
                ApplicationErrorKind::Unknown,
                e.description()
              )
            };
            let message_ident = TMessageIdentifier::new("getNextEvent", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&ret_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
        }
      },
    }
  }
}

impl <H: TerminalWrapperSyncHandler> TProcessor for TerminalWrapperSyncProcessor<H> {
  fn process(&self, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let message_ident = i_prot.read_message_begin()?;
    let res = match &*message_ident.name {
      "beginExecution" => {
        self.process_begin_execution(message_ident.sequence_number, i_prot, o_prot)
      },
      "getNextEvent" => {
        self.process_get_next_event(message_ident.sequence_number, i_prot, o_prot)
      },
      method => {
        Err(
          thrift::Error::Application(
            ApplicationError::new(
              ApplicationErrorKind::UnknownMethod,
              format!("unknown method {}", method)
            )
          )
        )
      },
    };
    thrift::server::handle_process_result(&message_ident, res, o_prot)
  }
}

//
// TerminalWrapperBeginExecutionArgs
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct TerminalWrapperBeginExecutionArgs {
  exe_req: ProcessExecutionRequest,
}

impl TerminalWrapperBeginExecutionArgs {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<TerminalWrapperBeginExecutionArgs> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<ProcessExecutionRequest> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = ProcessExecutionRequest::read_from_in_protocol(i_prot)?;
          f_1 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("TerminalWrapperBeginExecutionArgs.exe_req", &f_1)?;
    let ret = TerminalWrapperBeginExecutionArgs {
      exe_req: f_1.expect("auto-generated code should have checked for presence of required fields"),
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("beginExecution_args");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("exe_req", TType::Struct, 1))?;
    self.exe_req.write_to_out_protocol(o_prot)?;
    o_prot.write_field_end()?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// TerminalWrapperBeginExecutionResult
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct TerminalWrapperBeginExecutionResult {
  result_value: Option<RunId>,
  creation_error: Option<CreationError>,
}

impl TerminalWrapperBeginExecutionResult {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<TerminalWrapperBeginExecutionResult> {
    i_prot.read_struct_begin()?;
    let mut f_0: Option<RunId> = None;
    let mut f_1: Option<CreationError> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        0 => {
          let val = RunId::read_from_in_protocol(i_prot)?;
          f_0 = Some(val);
        },
        1 => {
          let val = CreationError::read_from_in_protocol(i_prot)?;
          f_1 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = TerminalWrapperBeginExecutionResult {
      result_value: f_0,
      creation_error: f_1,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("TerminalWrapperBeginExecutionResult");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.result_value {
      o_prot.write_field_begin(&TFieldIdentifier::new("result_value", TType::Struct, 0))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?;
      ()
    } else {
      ()
    }
    if let Some(ref fld_var) = self.creation_error {
      o_prot.write_field_begin(&TFieldIdentifier::new("creation_error", TType::Struct, 1))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?;
      ()
    } else {
      ()
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
  fn ok_or(self) -> thrift::Result<RunId> {
    if self.creation_error.is_some() {
      Err(thrift::Error::User(Box::new(self.creation_error.unwrap())))
    } else if self.result_value.is_some() {
      Ok(self.result_value.unwrap())
    } else {
      Err(
        thrift::Error::Application(
          ApplicationError::new(
            ApplicationErrorKind::MissingResult,
            "no result received for TerminalWrapperBeginExecution"
          )
        )
      )
    }
  }
}

//
// TerminalWrapperGetNextEventArgs
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct TerminalWrapperGetNextEventArgs {
}

impl TerminalWrapperGetNextEventArgs {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<TerminalWrapperGetNextEventArgs> {
    i_prot.read_struct_begin()?;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = TerminalWrapperGetNextEventArgs {};
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("getNextEvent_args");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// TerminalWrapperGetNextEventResult
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct TerminalWrapperGetNextEventResult {
  result_value: Option<SubprocessEvent>,
  program_has_ended: Option<ProgramHasEnded>,
  exe_error: Option<ExecutionError>,
}

impl TerminalWrapperGetNextEventResult {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<TerminalWrapperGetNextEventResult> {
    i_prot.read_struct_begin()?;
    let mut f_0: Option<SubprocessEvent> = None;
    let mut f_1: Option<ProgramHasEnded> = None;
    let mut f_2: Option<ExecutionError> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        0 => {
          let val = SubprocessEvent::read_from_in_protocol(i_prot)?;
          f_0 = Some(val);
        },
        1 => {
          let val = ProgramHasEnded::read_from_in_protocol(i_prot)?;
          f_1 = Some(val);
        },
        2 => {
          let val = ExecutionError::read_from_in_protocol(i_prot)?;
          f_2 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = TerminalWrapperGetNextEventResult {
      result_value: f_0,
      program_has_ended: f_1,
      exe_error: f_2,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("TerminalWrapperGetNextEventResult");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.result_value {
      o_prot.write_field_begin(&TFieldIdentifier::new("result_value", TType::Struct, 0))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?;
      ()
    } else {
      ()
    }
    if let Some(ref fld_var) = self.program_has_ended {
      o_prot.write_field_begin(&TFieldIdentifier::new("program_has_ended", TType::Struct, 1))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?;
      ()
    } else {
      ()
    }
    if let Some(ref fld_var) = self.exe_error {
      o_prot.write_field_begin(&TFieldIdentifier::new("exe_error", TType::Struct, 2))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?;
      ()
    } else {
      ()
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
  fn ok_or(self) -> thrift::Result<SubprocessEvent> {
    if self.program_has_ended.is_some() {
      Err(thrift::Error::User(Box::new(self.program_has_ended.unwrap())))
    } else if self.exe_error.is_some() {
      Err(thrift::Error::User(Box::new(self.exe_error.unwrap())))
    } else if self.result_value.is_some() {
      Ok(self.result_value.unwrap())
    } else {
      Err(
        thrift::Error::Application(
          ApplicationError::new(
            ApplicationErrorKind::MissingResult,
            "no result received for TerminalWrapperGetNextEvent"
          )
        )
      )
    }
  }
}

